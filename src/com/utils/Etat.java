package com.utils;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;


public class Etat {
	private int etatID;
	private Map<Character, ArrayList<Etat>> nextEtat;
	private Set <Etat> etats;
	private boolean acceptEtat;
	
	// This constructor is used for NFA
	public Etat (int ID) {
		this.setEtatID(ID);
		this.setNextEtat(new HashMap <Character, ArrayList<Etat>> ());
		this.setAcceptEtat(false);
	}
	
	// This constructor is used for DFA
	public Etat(Set<Etat> etats, int ID) {
		this.setEtats(etats);
		this.setEtatID(ID);
		this.setNextEtat(new HashMap <Character, ArrayList<Etat>> ());
		
		// find if there is final etat in this set of etats
		for (Etat p : etats) {
			if (p.isAcceptEtat()) {
				this.setAcceptEtat(true);
				break;
			}
		}
	}
	
	// Add transition between etats and insert into the arrayList
	// or create the arrayList based on key
	public void addTransition (Etat next, char key) {
		ArrayList <Etat> list = this.nextEtat.get(key);
		
		if (list == null) {
			list = new ArrayList<Etat> ();
			this.nextEtat.put(key, list);
		}
		
		list.add(next);
	}

	// Get all transition etats based on symbol
	public ArrayList<Etat> getAllTransitions(char c) {
		if (this.nextEtat.get(c) == null)	{	return new ArrayList<Etat> ();	}
		else 								{	return this.nextEtat.get(c);	}
	}
	
	// Autogenerated Getters and Setters
	public Map<Character, ArrayList<Etat>> getNextEtat() {
		return nextEtat;
	}

	public void setNextEtat(HashMap<Character, ArrayList<Etat>> hashMap) {
		this.nextEtat = hashMap;
	}
	
	public int getEtatID() {
		return etatID;
	}

	public void setEtatID(int etatID) {
		this.etatID = etatID;
	}

	public boolean isAcceptEtat() {
		return acceptEtat;
	}

	public void setAcceptEtat(boolean acceptEtat) {
		this.acceptEtat = acceptEtat;
	}

	public Set <Etat> getEtats() {
		return etats;
	}

	public void setEtats(Set <Etat> etats) {
		this.etats = etats;
	}
}
